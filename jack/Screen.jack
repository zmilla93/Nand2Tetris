// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen, powersOfTwo;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i, n;
        // The screen is mapped to RAM[16384 - 24576]
        let screen = 16384;
        let color = true;
        // Generate the powers of two for use later
        let i = 0;
        let n = 1;
        let powersOfTwo = Array.new(16);
        while(i<16){
            let powersOfTwo[i] = n;
            let n = n + n;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = screen;
        while(i < 8192){
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mod, mask;
        let address = (x/16) + (y*32);
        let mod = (x - (16 * (x / 16)));
        let mask = powersOfTwo[mod];
        // let mask = powersOfTwo[x & 15];
        if(color) {
            let screen[address] = screen[address] | mask;
        } else {
            // let mask = (mask * -1) - 1;
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff;

        // Horizontal Line
        if(y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }
        // Vertical Line
        if(x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        // Diagonal Line
        do Screen.drawDiagonalLine(x1, y1, x2, y2);
        return;
    }

    // Highly optimized for use with drawRectangle and drawCircle
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int temp, adr1, adr2, end, i, yOffset;
        var int maskLeft, maskRight, mask;
        var int mod1;
        do Screen.drawHorizontalLinePixel(x1, x2, y);
        // if(x1 > x2) {
        //     let temp = x1;
        //     let x1 = x2;
        //     let x2 = temp;
        // }

        // let yOffset = y * 32;
        // let adr1 = (x1 / 16) + yOffset;
        // let adr2 = (x2 / 16) + yOffset;
        // let mod1 = x1 - (16 * (x1 / 16));
        // // do Output.printInt(mod1);
        // // do Output.printString(" ");
        // let maskLeft = ~(powersOfTwo[mod1] - 1);
        // let screen[adr1] = maskLeft;
        // if(adr2-adr1 > 0) {
        //     let mod1 = x2 - (16 * (x2 / 16));
        //     let maskRight = (powersOfTwo[mod1] - 1);
        //     let screen[adr2] = maskRight;
        // }
        // // Draw Center
        // let i = adr1 + 1;
        // let end = adr2;
        // while(i < end) {
        //     let screen[i] = color;
        //     let i = i + 1;
        // }
        return;
    }

    function void drawHorizontalLinePixel(int x1, int x2, int y) {
        var int i, diff, length;
        let length = x2 - x1;
        if(length > 0) {
            let diff = 1;
        } else {
            let diff = -1;
        }
        let i = 0;
        while(Math.abs(i) < Math.abs(length + diff)) {
            do Screen.drawPixel(x1 + i, y);
            let i = i + diff;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int i, diff, length;
        let length = y2 - y1;
        if(length > 0) {
            let diff = 1;
        } else {
            let diff = -1;
        }
        while(Math.abs(length - i) > 0) {
            do Screen.drawPixel(x, y1 + i);
            let i = i + diff;
        }
        return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        while((Math.abs(dx - a) > 0) & (Math.abs(dy - b) > 0)) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if(diff < 0) {
                if(dx < 0) {
                    let a = a - 1;
                } else {
                    let a = a + 1;
                }
                if(dy < 0) {
                    let diff = diff - dy;
                } else {
                    let diff = diff + dy;
                }
            } else {
                if(dy < 0) {
                    let b = b - 1;
                } else {
                    let b = b + 1;
                }
                if(dx < 0) {
                    let diff = diff + dx;
                } else {
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int height, i;
        let height = y2 - y1;
        let i = 0;
        if(x2 < x1 | y2 < y1) {
            do Sys.error(9);
        }
        while(i < height) {
            do Screen.drawHorizontalLine(x1, x2, y1 + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int d, dy;
        let dy = -r;
        while(dy < r) {
            let d = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawHorizontalLine(x-d, x+d, y+dy);
            let dy = dy + 1;
        }
        return;
    }

}