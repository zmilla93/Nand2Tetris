// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, maxLength;
    field Array string;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLen) {
        let length = 0;
        let maxLength = maxLen;
        if(maxLength > 0){
            let string = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(maxLength > 0) {
            do string.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if((j > -1) & (j < length)) {
            return string[j];
        }
        return null;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j > -1) & (j < length)) {
            let string[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLength-1) {
            let string[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0) {
            let length = length - 1;
            let string[length] = null;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, d, value;
        var boolean neg;
        let i = 0;
        let value = 0;
        while (i < length) {
            if(string[i] = 45) {
                let neg = true;
            }
            else {
                if(string[i] < 48 |  string[i] > 57) {
                    return value;
                }
                else {
                    let d = string[i] - 48;
                    let value = (value * 10) + d;
                }
            }
            let i = i + 1;
        }
        if (neg) {
            return -value;
        }
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    // "Magic" Numbers
    // 10 = base 10;
    // 45 = '-'
    // 48 = int/char ascii offset;
    method void setInt(int val) {
        var int digit, i, j;
        var char a, c;
        var boolean neg;
        var Array numbers;
        var String temp;
        let numbers = Array.new(16);
        let i = 0;
        if(val < 0) {
            let neg = true;
            let val = Math.abs(val);
        }
        while(val > 10) {
            let digit = val - (10 * (val / 10));
            let numbers[i] = (digit + 48);
            let val = val / 10;
            let i = i + 1;
        }
        let digit = val - (10 * (val / 10));
        let numbers[i] = digit + 48;
        let length = i+1;
        if (neg) {
            let i = i + 1;
            let numbers[i] = 45;
            let length = length+1;
        }
        let j = 0;
        while(i > -1) {
            let string[j] = numbers[i];
            let j = j + 1;
            let i = i - 1;
        }
        return;

    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
